<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4020.3">
  <POU Name="FB_Period" Id="{fa865a56-77ff-42e4-84d1-d335471fd6c5}" SpecialFunc="None">
    <Declaration><![CDATA[(****************************************************************************************)
(*							Beckhoff Automation Poland									*)
(*								FB_Period v1.1											*)
(*									20.02.2008											*)
(*		Blok funkcyjny wystawiający wyjście w określonym przedziale czasu				*)
(*				wymaga podania aktualnego czasu na wejście bloku 						*)
(*																						*)
(*______________________________________________________________________________________*)
FUNCTION_BLOCK FB_Period
VAR_INPUT
	bReset				:	BOOL;									(*Przywrócenie wartości w bloku do stanu początkowego*)
	wStartHour			:	WORD;									(*Godzina wystawienia wyjścia*)
	wStartMinute		:	WORD;									(*Minuta wystawienia wyjścia*)
	wStopHour			:	WORD;									(*Godzina wyzerowania wyjścia*)
	wStopMinute			:	WORD;									(*Minuta  wyzerowania wyjścia*)
	stActTime			:	TIMESTRUCT;								(*Aktualny czas w formie struktury*)
END_VAR
VAR_OUTPUT
	bOut				:	BOOL;									(*Wyjście*)
END_VAR
VAR
	StartEdge			:	R_TRIG;
	StopEdge			:	R_TRIG;
	ResetEdge			:	R_TRIG;
	bFirstCycle			:	BOOL:=TRUE;
	wStartHourOld		: 	WORD;
	wStartMinuteOld		: 	WORD;
	wStopHourOld		: 	WORD;
	wStopMinuteOld		: 	WORD;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[StartEdge();
StopEdge();
ResetEdge(CLK:=bReset);

IF ResetEdge.Q THEN
	bOut:=FALSE;
	bFirstCycle:=TRUE;
END_IF;

(*Sprawdzenie czy była zmiana zadanych przedziałów czasowych*)
IF wStartHour<>wStartHourOld OR wStartMinute<>wStartMinuteOld OR wStopHour<>wStopHourOld OR wStopMinute<>wStopMinuteOld THEN
	bFirstCycle:=TRUE;
END_IF;

IF stActTime.wYear <> 0 THEN
	IF bFirstCycle THEN
	(*W pierwszym cylku należy sprawdzić czy włączamy czy wyłączamy i likwidujemy zmienna pierwszego cyklu*)
		IF stActTime.wHour< wStartHour OR stActTime.wHour>wStopHour THEN
		(*Poznajemy po godzinie, ze na pewno jest wylaczone *)
			bOut := FALSE;
		ELSIF (stActTime.wHour=wStartHour AND stActTime.wMinute < wStartMinute) OR (stActTime.wHour=wStopHour AND stActTime.wMinute > wStopMinute)  THEN
		(*W tej godzinie zaczyna sie badz konczy wylaczenie, ale jescze jest wylaczone*)
			bOut := FALSE; (*Wylaczone*)
		ELSE
			bOut := TRUE; (*Wlaczone*)
		END_IF
		bFirstCycle := FALSE;
	ELSE
	(*Teraz reagujemy tylko na zmiany - wykrycie sygnału do startu i końca*)
		StartEdge.CLK := wStartHour = stActTime.wHour AND wStartMinute = stActTime.wMinute;
		StopEdge.CLK := wStopHour = stActTime.wHour AND wStopMinute = stActTime.wMinute;
		IF StartEdge.Q  THEN bOut := TRUE; (*Dzien*) END_IF
		IF StopEdge.Q  THEN bOut := FALSE; (*Noc*) END_IF
	END_IF
END_IF

wStartHourOld:=wStartHour;
wStartMinuteOld:=wStartMinute;
wStopHourOld:=wStopHour;
wStopMinuteOld:=wStopMinute;]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>