<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.12">
  <DUT Name="E_AX580x_ERROR" Id="{6b04a7a5-a300-4b26-b06b-93c21861fe77}">
    <Declaration><![CDATA[// CoE object 0xFA82
TYPE E_AX580x_ERROR :
(	
	eAX580x_ERROR_FAULT_MAXT_C1		 					:= 16#0001,	// The temperature has exceeded the maximum permissible temperature (µC1).
	eAX580x_ERROR_FAULT_MAXT_C2			 				:= 16#0002,	// The temperature has exceeded the maximum permissible temperature (µC2).
	eAX580x_ERROR_FAULT_MINT_C1						 	:= 16#0003,	// The temperature has fallen below the minimum permissible temperature (µC1).
	eAX580x_ERROR_FAULT_MINT_C2 						:= 16#0004,	// The temperature has fallen below the minimum permissible temperature (µC2).
	eAX580x_ERROR_HW_ERR_MAX_VCC_C1						:= 16#0101,	// The maximum supply voltage was exceeded (3.3 V).
	eAX580x_ERROR_HW_ERR_MAX_VCC_C2					 	:= 16#0102,	// The maximum supply voltage was exceeded (3.3 V).
	eAX580x_ERROR_HW_ERR_MIN_VCC_C1			 			:= 16#0103,	// The supply voltage fell below the minimum value (3.3 V)
	eAX580x_ERROR_HW_ERR_MIN_VCC_C2						:= 16#0104,	// The supply voltage fell below the minimum value (3.3 V)
	eAX580x_ERROR_FAULT_MCTC1_TO						:= 16#0201,	// The MCTests of µC1 were not carried out completely within the specified time
	eAX580x_ERROR_FAULT_MCTC2_TO						:= 16#0202,	// The MCTests of µC2 were not carried out completely within the specified time
	eAX580x_ERROR_FAULT_TIMER_C1			 			:= 16#0203,	// The global timer was not updated in time.
	eAX580x_ERROR_FAULT_TIMER_C2						:= 16#0204,	// The global timer was not updated in time.
	eAX580x_ERROR_FAULT_TS_WDG_TO_C1					:= 16#020C,	// The TwinSAFE module was not called within the watchdog time.
	eAX580x_ERROR_FAULT_TS_WDG_TO_C2 					:= 16#020D,	// The TwinSAFE module was not called within the watchdog time.
	eAX580x_ERROR_FAULT_RESET_MC1 	 					:= 16#020E,	// A reset has occurred in the operation of the controller for µC1. µC2 was not reset thereby.
	eAX580x_ERROR_FAULT_SERCOMC2						:= 16#0300,	// an error occurred in the SerComP24C2 module during data transmission
	eAX580x_ERROR_FAULT_SERCOM1							:= 16#401,	// an error occurred in the SerComP24C1 module during data transmission
	eAX580x_ERROR_FAULT_SERCOM2							:= 16#402,	// an error occurred in the SerComP24C1 module during data transmission
	eAX580x_ERROR_FAULT_SERCOM3							:= 16#403,	// an error occurred in the SerComP24C1 module during data transmission
	eAX580x_ERROR_FAULT_SERCOM4							:= 16#404,	// an error occurred in the SerComP24C1 module during data transmission
	eAX580x_ERROR_FAULT_SERCOM5							:= 16#405,	// an error occurred in the SerComP24C1 module during data transmission
	eAX580x_ERROR_FAULT_SERCOM6							:= 16#406,	// an error occurred in the SerComP24C1 module during data transmission
	eAX580x_ERROR_FAULT_SERCOM7							:= 16#407,	// an error occurred in the SerComP24C1 module during data transmission
	eAX580x_ERROR_FAULT_SERCOM8							:= 16#408,	// an error occurred in the SerComP24C1 module during data transmission
	eAX580x_ERROR_FAULT_SERCOM9							:= 16#409,	// an error occurred in the SerComP24C1 module during data transmission
	eAX580x_ERROR_FAULT_SERCOM10 						:= 16#40A,	// an error occurred in the SerComP24C1 module during data transmission
	eAX580x_ERROR_FAULT_SERCOM11 						:= 16#40B,	// an error occurred in the SerComP24C1 module during data transmission
	eAX580x_ERROR_FAULT_TEMPSENSOR1						:= 16#501,	// Error in the communication with one of the temperature sensors
	eAX580x_ERROR_FAULT_TEMPSENSOR2 					:= 16#502,	// Error in the communication with one of the temperature sensors
	eAX580x_ERROR_FAULT_TEMPSENSOR3						:= 16#503,	// Error in the communication with one of the temperature sensors
	eAX580x_ERROR_FAULT_TEMPSENSOR4						:= 16#504,	// Error in the communication with one of the temperature sensors
	eAX580x_ERROR_FAULT_TEMPSENSOR5						:= 16#505,	// Error in the communication with one of the temperature sensors
	eAX580x_ERROR_FAULT_TEMPSENSOR6						:= 16#506,	// Error in the communication with one of the temperature sensors
	eAX580x_ERROR_FAULT_TEMPSENSOR7						:= 16#507,	// Error in the communication with one of the temperature sensors
	eAX580x_ERROR_FAULT_OUTPUTCOMPARE					:= 16#0601,	// The values output by µC1 and µC2 differ.
	eAX580x_ERROR_FAULT_OUTPUTCOMPAREC2			 		:= 16#0602,	// The values output by µC1 and µC2 differ.
	eAX580x_ERROR_HW_ERR_MIN_VCC_FPGA					:= 16#0700,	// The FPGA supply voltage fell below the minimum value (5 V).
	eAX580x_ERROR_HW_ERR_MAX_VCC_FPGA					:= 16#0701,	// The FPGA supply voltage exceeded the maximum value (5 V).
	eAX580x_ERROR_FAULT_FEEDBACK_C1						:= 16#0710,	// An error was detected in the feedback channels of µC1.
	eAX580x_ERROR_FAULT_FEEDBACK_C2						:= 16#0711,	// An error was detected in the feedback channels of µC2.
	eAX580x_ERROR_FAULT_Parameter_C1					:= 16#0720,	// General parameter error µC1 
	eAX580x_ERROR_FAULT_Parameter_C2					:= 16#0721,	// General parameter error µC2 
	eAX580x_ERROR_FAULT_Parameter_C1_DRIVE_PROFILE		:= 16#0722,	// Parameter: unknown parameter index µC1 drive profile
	eAX580x_ERROR_FAULT_Parameter_C1_VENDOR_SPECIFIC	:= 16#0723,	// Parameter: unknown parameter index µC1 vendor-specific.
	eAX580x_ERROR_FAULT_Parameter_C2_DRIVE_PROFILE		:= 16#0724,	// Parameter: unknown parameter index µC2 drive profile.
	eAX580x_ERROR_FAULT_Parameter_C2_VENDOR_SPECIFIC	:= 16#0725,	// Parameter: unknown parameter index µC2 vendor-specific.
	eAX580x_ERROR_FAULT_PDO_MAPPING_FSOE_COMMAND 		:= 16#0726,	// PDO mapping axis 1/2: FSOE COMMAND error.
	eAX580x_ERROR_FAULT_PDO_MAPPING_LENGTH				:= 16#0727,	// PDO mapping axis 1: Length_Error 
	eAX580x_ERROR_FAULT_PDO_MAPPING_STO_K1				:= 16#0728,	// PDO mapping axis 1: STO error 
	eAX580x_ERROR_FAULT_PDO_MAPPING_SS1_1_K1			:= 16#0729,	// PDO mapping axis 1: Error SS1_1 
	eAX580x_ERROR_FAULT_PDO_MAPPING_SS2_1_K1			:= 16#072A,	// PDO mapping axis 1: Error SS2_1 
	eAX580x_ERROR_FAULT_PDO_MAPPING_SOS_1_K1			:= 16#072B,	// PDO mapping axis 1: SS2_1 error
	eAX580x_ERROR_FAULT_PDO_MAPPING_SSR_1_K1		 	:= 16#072C,	// PDO mapping axis 1: SSR_1 error
	eAX580x_ERROR_FAULT_PDO_MAPPING_SDIp_K1				:= 16#072D,	// PDO mapping axis 1: SDIp error
	eAX580x_ERROR_FAULT_PDO_MAPPING_SDIn_K1				:= 16#072E,	// PDO mapping axis 1: SDIn error
	eAX580x_ERROR_FAULT_PDO_MAPPING_Error_ACK_K1	 	:= 16#072F,	// PDO mapping axis 1: Error_ACK error
	eAX580x_ERROR_FAULT_PDO_MAPPING_Error_CRC0			:= 16#0730,	// PDO mapping axis 1/2: FSOE CRC0 error
	eAX580x_ERROR_FAULT_PDO_MAPPING_STO_K2				:= 16#0731,	// PDO mapping axis 2: STO error 
	eAX580x_ERROR_FAULT_PDO_MAPPING_SS1_1_K2			:= 16#0732,	// PDO mapping axis 2: Error SS1_1 
	eAX580x_ERROR_FAULT_PDO_MAPPING_SS2_1_K2			:= 16#0733,	// PDO mapping axis 2: Error SS2_1 
	eAX580x_ERROR_FAULT_PDO_MAPPING_SOS_1_K2			:= 16#0734,	// PDO mapping axis 2: SS2_1 error
	eAX580x_ERROR_FAULT_PDO_MAPPING_SSR_1_K2			:= 16#0735,	// PDO mapping axis 2: SSR_1 error
	eAX580x_ERROR_FAULT_PDO_MAPPING_SDIp_K2				:= 16#0736,	// PDO mapping axis 2: SDIp error
	eAX580x_ERROR_FAULT_PDO_MAPPING_SDIn_K2				:= 16#0737,	// PDO mapping axis 2: SDIn error
	eAX580x_ERROR_FAULT_PDO_MAPPING_Error_ACK_K2	 	:= 16#0738,	// PDO mapping axis 2: Error_ACK error
	eAX580x_ERROR_FAULT_PDO_MAPPING_Error_CRC1			:= 16#0739,	// PDO mapping axis 2: FSOE CRC1 error
	eAX580x_ERROR_FAULT_PDO_MAPPING_Error_ConnID		:= 16#073A,	// PDO mapping axis 1/2: FSOE ConnID error
	eAX580x_ERROR_FAULT_PDO_MAPPING_SSM_1_K1			:= 16#073B,	// PDO mapping axis 1: SSM_1_K1 error
	eAX580x_ERROR_FAULT_PDO_MAPPING_SSM_1_K2			:= 16#073C,	// PDO mapping axis 2: SSM_1_K2 error
	eAX580x_ERROR_FAULT_PDO_MAPPING_SSM_2_K1			:= 16#073D,	// PDO mapping axis 1: SSM_2_K1 error
	eAX580x_ERROR_FAULT_PDO_MAPPING_SSM_2_K2			:= 16#073E,	// PDO mapping axis 2: SSM_2_K2 error
	eAX580x_ERROR_FAULT_WRONG_MOTORCONSTR_UCTIONTYPE_K1	:= 16#0740,	// Register communication: parameterized motor type for axis 1 does not correspond to the connected motor.
	eAX580x_ERROR_FAULT_UNKNOWN_MOTOR_TYPE_K1			:= 16#0741,	// Register communication: parameterized motor type for axis 1 is unknown
	eAX580x_ERROR_FAULT_WRONG_MOTORCONSTR_UCTIONTYPE_K2	:= 16#0742,	// Register communication: parameterized motor type for axis 2 does not correspond to the connected motor.
	eAX580x_ERROR_FAULT_UNKNOWN_MOTOR_TYPE_K2			:= 16#0743,	// Register communication: parameterized motor type for axis 2 is unknown.
	eAX580x_ERROR_FAULT_NUM_OF_POLEPAIRS_K1				:= 16#0744,	// Register communication: parameterized number of pole pairs for axis 1 does not correspond to the connected motor.
	eAX580x_ERROR_FAULT_NUM_OF_POLEPAIRS_K2				:= 16#0745,	// Register communication: parameterized number of pole pairs for axis 2 does not correspond to the connected motor.
	eAX580x_ERROR_FAULT_WRONG_MOTOR_CONFIGURED_K1		:= 16#0746,	// Register communication: parameterized motor type for axis 1 does not correspond to the connected motor.
	eAX580x_ERROR_FAULT_WRONG_MOTOR_CONFIGURED_K2		:= 16#0747,	// Register communication: parameterized motor type for axis 2 does not correspond to the connected motor
	eAX580x_ERROR_FAULT_RXPDO_LENGTH					:= 16#0748,	// PDO mapping: RXPDO length is wrong.
	eAX580x_ERROR_FAULT_TXPDO_LENGTH					:= 16#0749,	// PDO mapping: TXPDO length is wrong.
	eAX580x_ERROR_FAULT_UNKNOWN_RXPDO_INDEX				:= 16#074A,	// PDO mapping: RXPDO index is unknown 
	eAX580x_ERROR_FAULT_UNKNOWN_TXPDO_INDEX				:= 16#074B,	// PDO mapping: TXPDO index is unknown 
	eAX580x_ERROR_FAULT_WRONG_NUMBER_OF_AXLE			:= 16#074C,	// The parameterized number of axes does not correspond to the number detected.
	eAX580x_ERROR_FAULT_CRC_INIT_C1						:= 16#1001,	// An incorrect checksum at µC1 was determined during PowerOn reset.
	eAX580x_ERROR_FAULT_CRC_INIT_C2						:= 16#1002,	// An incorrect checksum at µC2 was determined during PowerOn reset.
	eAX580x_ERROR_FAULT_CRC_C1							:= 16#1003,	// An incorrect checksum was determined for µC1 during operation.
	eAX580x_ERROR_FAULT_CRC_C2							:= 16#1004,	// An incorrect checksum was determined for µC2 during operation.
	eAX580x_ERROR_FAULT_RAM_C1							:= 16#1011,	// An error occurred during the RAM test of µC1.
	eAX580x_ERROR_FAULT_RAM_C2							:= 16#1012,	// An error occurred during the RAM test of µC2.
	eAX580x_ERROR_FAULT_RAM_CHECKERBOARD_C1				:= 16#1013,	// An error occurred during the RAM test of µC1.
	eAX580x_ERROR_FAULT_RAM_CHECKERBOARD_C2				:= 16#1014,	// An error occurred during the RAM test of µC2.
	eAX580x_ERROR_FAULT_GLBL_TMR						:= 16#1021,	// The global timer is not working correctly.
	eAX580x_ERROR_FAULT_SPLIM1							:= 16#1031,	// Stack overruns are no longer being intercepted correctly.
	eAX580x_ERROR_FAULT_SPLIM2 							:= 16#1032,	// Stack overruns are no longer being intercepted correctly.
	eAX580x_ERROR_FAULT_OPCT_GRP_C1						:= 16#1100,	// The opcode test for µC1 has failed.
	eAX580x_ERROR_FAULT_OPCT_GRP_C2						:= 16#1300,	// The opcode test for µC2 has failed.
	eAX580x_ERROR_FAULT_ESS_CRC_C1						:= 16#1801,	// Different check sums were determined in the TwinSAFE telegrams.
	eAX580x_ERROR_FAULT_ESS_CRC_C2						:= 16#1802,	// Different check sums were determined in the TwinSAFE telegrams.
	eAX580x_ERROR_FAULT_SW_MAIN1_C1						:= 16#1803,	// The default case of the main loop of µC1 was called.
	eAX580x_ERROR_FAULT_SW_MAIN1_C2						:= 16#1804,	// The default case of the main loop of µC2 was called.
	eAX580x_ERROR_FAULT_ESLCONID_PRJCRCRD				:= 16#1805,	// The Connection ID is not zero when reading the project CRC.
	eAX580x_ERROR_FAULT_ESLCONID_PRJCRCWR				:= 16#1806,	// The Connection ID is not zero when writing the project CRC.
	eAX580x_ERROR_FAULT_SIZE_EEVONDOR_EXID 				:= 16#1807,	// An address was accessed that lies outside the vendor range in the EEPROM. 
	eAX580x_ERROR_FAULT_COM_C1C2						:= 16#5100,	// Communication between µC1 and µC2 is disturbed.
	eAX580x_ERROR_FAULT_ISR_SNT_FEEDBACK				:= 16#5101,	// High priority ISR: communication interrupted: switched mode power supply feedback 
	eAX580x_ERROR_FAULT_ISR_ANGLE_K1					:= 16#5102,	// High priority ISR: communication interrupted: axis 1 angle 
	eAX580x_ERROR_FAULT_ISR_ANGLE_K2					:= 16#5103,	// High priority ISR: communication interrupted: axis 2 angle 
	eAX580x_ERROR_FAULT_ISR_DELTA_K1					:= 16#5104,	// High priority ISR: communication interrupted: axis 1 distance travelled 
	eAX580x_ERROR_FAULT_ISR_DELTA_K2					:= 16#5105,	// High priority ISR: communication interrupted: axis 2 distance travelled 
	eAX580x_ERROR_FAULT_ISR_VELO_K1						:= 16#5106,	// High priority ISR: communication interrupted: axis 1 velocity
	eAX580x_ERROR_FAULT_ISR_VELO_K2						:= 16#5107,	// High priority ISR: communication interrupted: axis 2 velocity
	eAX580x_ERROR_FAULT_ISR_TEST_FEEDBACK				:= 16#5108,	// High priority ISR: communication interrupted: feedback from switch-off channels
	eAX580x_ERROR_FAULT_TIMEOUT_REG_AX5000_CONTROL		:= 16#5109,	// Register communication: AX5000 does not answer in time: Controlword
	eAX580x_ERROR_FAULT_TIMEOUT_REG_AX5000_STATUS		:= 16#510A,	// Register communication: AX5000 does not answer in time: Statusword
	eAX580x_ERROR_FAULT_TIMEOUT_REG_AX5000_REGADR		:= 16#510B,	// Register communication: AX5000 does not answer in time: Register address
	eAX580x_ERROR_FAULT_TIMEOUT_REG_AX5000_REGDATA		:= 16#510C,	// Register communication: AX5000 does not answer in time: Register data
	eAX580x_ERROR_FAULT_TIMEOUT_REG_AX5000_CRC			:= 16#510D,	// Register communication: AX5000 does not answer in time: CRC
	eAX580x_ERROR_FAULT_UNKNOWN_AX5000_INTERFACE 		:= 16#510E,	// Register communication: unknown interface to the AX5000
	eAX580x_ERROR_FAULT_COMERROR_AX5000_INTERFACE		:= 16#510F,	// Register communication: the interface to the AX5000 has a communication error 
	eAX580x_ERROR_FAULT_WRITE_HW_VERSION_AX5805			:= 16#5110,	// Values could not be written to the register in the AX5000
	eAX580x_ERROR_FAULT_EXT_ADC_ADDRESS					:= 16#5114,	// High priority ISR: External ADC: an impermissible address was read
	eAX580x_ERROR_FAULT_REGISTER_AX5000_CRC_ERROR		:= 16#5115,	// Register communication with the AX5000: telegram has a CRC error.
	eAX580x_ERROR_FAULT_CYCLIC_AX5000_CRC_ERROR			:= 16#5116,	// High priority ISR: cyclic communication with the AX5000: telegram has a CRC error.
	eAX580x_ERROR_FAULT_UNKNOWN_REGISTER_ADDRESS	 	:= 16#5117,	// Register communication: Addressed register is unknown.
	eAX580x_ERROR_FAULT_AX5000_NOT_READY				:= 16#5118,	// High priority ISR: cyclic communication with the AX5000: AX5000 signals a communication error.
	eAX580x_ERROR_FAULT_C1C2_SYNC_LOST					:= 16#5119,	// High priority ISR: cyclic communication between µC1 and µC2: Communication error
	eAX580x_ERROR_FAULT_SET_MAPPED_STATE				:= 16#5C00,	// Mapped safety functions: error while setting the state.
	eAX580x_ERROR_FAULT_RESET_MAPPED_STATE				:= 16#5C01,	// Mapped safety functions: error while resetting the state.
	eAX580x_ERROR_FAULT_MAPPED_FUNCTION					:= 16#5C02,	// Mapped safety functions: invalid mapping, function does not exist.
	eAX580x_ERROR_FAULT_MAPPED_INSTANCE					:= 16#5C03,	// Mapped safety functions: invalid mapping, instance does not exist.
	eAX580x_ERROR_FAULT_STO_MODE						:= 16#5E02,	// The requested STO mode is invalid.
	eAX580x_ERROR_FAULT_UNDEFINED_ERRORREACTION			:= 16#5E04,	// Error reaction: invalid error reaction, error reaction does not exist.
	eAX580x_ERROR_FAULT_SDI_MODE						:= 16#5E03,	// The requested SDI mode is invalid.
	eAX580x_ERROR_FAULT_CRC_COMPARE_C1					:= 16#5F00,	// Incorrect checksum detected during comparison by µC1.
	eAX580x_ERROR_FAULT_CRC_COMPARE_C2					:= 16#5F01,	// Incorrect checksum detected during comparison by µC2.
	eAX580x_ERROR_FAULT_TMR2_INTERRUPT_C1				:= 16#5F02,	// MC_Test: Timer2 has triggered an interrupt on µC1. HighPrioISR was not called in time.
	eAX580x_ERROR_FAULT_TMR2_INTERRUPT_C2				:= 16#5F03,	// MC_Test: Timer2 has triggered an interrupt on µC2. HighPrioISR was not called in time.
	eAX580x_ERROR_FAULT_SWITCHOFF_TEST					:= 16#5F04,	// MC_Test: the test of the switch-off channels has failed.
	eAX580x_ERROR_FAULT_NO_SYNC 	 					:= 16#5F05,	// No SYNC signal 
	eAX580x_ERROR_FAULT_UNKNOWN_AXLE					:= 16#5F06,	// The requested axis is unknown.
	eAX580x_ERROR_FAULT_FPGA_C2							:= 16#5F07,	// The status of the FPGA is incorrect.
	eAX580x_ERROR_FAULT_ANGLE_FORMAT_C1					:= 16#5F08,	// The angles of µC1 read-in have the wrong format.
	eAX580x_ERROR_FAULT_ANGLE_FORMAT_C2					:= 16#5F09,	// The angles of µC2 read-in have the wrong format.
	eAX580x_ERROR_FAULT_SAFE_MAIN_STATE					:= 16#5F0A,	// Unknown state requested
	eAX580x_ERROR_FAULT_STARTUP_FAILED					:= 16#5F0B,	// Error during start-up.
	eAX580x_ERROR_FAULT_MOTION_DETECTION				:= 16#5F0C,	// Motion detection error
	eAX580x_ERROR_FAULT_PARAMETER_FSOE_VENDOR_ID	 	:= 16#6000,	// Incorrect vendor ID transmitted
	eAX580x_ERROR_FAULT_PARAMETER_FSOE_MODULE_IDENT		:= 16#6001,	// Incorrect module ID transmitted
	eAX580x_ERROR_FAULT_PARAMETER_FSOE_CRC	 			:= 16#6002	// CRC of the AX5805 parameters does not match the transmitted CRC (please check parameters, if necessary, activate System Manager configuration and reload safety project into the EL69xx).
);
END_TYPE]]></Declaration>
  </DUT>
</TcPlcObject>