<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.16">
  <POU Name="FB_McAxisOnlineAX8000" Id="{06d41240-3f20-422b-9a6f-3d20b5c4517b}" SpecialFunc="None">
    <Declaration><![CDATA[//==================================================================================================
//							Beckhoff Automation Poland
//									7.12.2018
//	Wszystkomajacy blok funkcyjny do sterowania osia, 
//	wymagane biblioteki: Tc2_EtherCAT, Tc2_MC2_Drive, Tc2_MC2
//  v1.5	|| TC v 3.1.4022.27		|| - dodane opisy bledow w formie zmiennych typu string
// 	v1.4 	|| TC v 3.1.4022.20	 	|| - ACT_MotorMonitoring - only for real axis
// 	v1.3 	|| TC v 3.1.4022.16	 	|| - spojne z AX5000
// 	v1.2 	|| TC v 3.1.4022.16	 	|| - Added ACT_SetPositionIO, migration part of logic from ACT_SetPosition to ACT_SetPositionIO
// 	v1.1 	|| TC v 3.1.4022.16	 	|| - ACT_MotorMonitoring - is executing always, ACT_Initialization - optimalization
// 	v1.0 	|| TC v 3.1.4022.16	 	|| - first edition
//==================================================================================================
{attribute 'reflection'}
FUNCTION_BLOCK FB_McAxisOnlineAX8000
VAR_IN_OUT
	stMcAxisOnline						: ST_McAxisOnline;
	Axis								: AXIS_REF;
END_VAR
VAR
	mcPower								: MC_Power;
	mcStop								: MC_Stop;
	mcHalt								: MC_Halt;
	mcStopSS1							: MC_Stop;
	mcStopSS2							: MC_Stop;
	mcReset								: MC_Reset;
	mcHome								: MC_Home;
	mcSetPosition						: MC_SetPosition;
	fbSetPositionOffset					: FB_CoEAX8000SetPositionOffset;
	mcJog								: MC_Jog;

	mcMoveAbsolute						: MC_MoveAbsolute;
	mcMoveRelative						: MC_MoveRelative;
	mcMoveVelocity						: MC_MoveVelocity;
	mcMoveModulo						: MC_MoveModulo;
	mcMoveAbsolute2						: MC_MoveAbsolute;
	mcMoveRelative2						: MC_MoveRelative;
	mcMoveVelocity2						: MC_MoveVelocity;
	mcMoveModulo2						: MC_MoveModulo;

	fbMotorMonitoring					: FB_MotorMonitoringAX8000;
	fbHoldingBrakeCtrl					: FB_HoldingBrakeCtrlAX8000;
	fbNcLimitSwitch						: FB_NcSWLimitSwitchCtrl;
	tonGetDriveDiag						: TON;
	fbReadChannelErrorCode				: FB_ReadChannelErrorCodeAX8000;
	
	mcReadDriveAddress					: MC_ReadDriveAddress;
	mcReadParameterSet					: MC_ReadParameterSet;
	fbGetDriveRef						: FB_GetDriveRef;

	// Internal
	bInitialized						: BOOL;
	bCommError							: BOOL;
	bReadParameterError					: BOOL;
	bInitError							: BOOL;
	bDriveError							: BOOL;
	bFBError							: BOOL;
	
// Initialization
	iInitStep							: INT;
	bInitializationError				: BOOL;
	wInitializationErrorCounter			: WORD;
	bDriveAddressReady					: BOOL;
	bDriveRefReady						: BOOL;
	bReadParameterSetReady				: BOOL;
	tonDelay							: TON;
// Re init
	udiOnlineChangeCntOld				: UDINT;
	bOnlineChangeDetected				: BOOL;
	bReInit								: BOOL;
	bReInitialized						: BOOL;
	bReInitializationError				: BOOL;
	{attribute 'instance-path'}
	{attribute 'noinit'}
	sInstancePath						: STRING;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Device dependent initialization 
ACT_Initialization();
// Device independent commands, mostly NC 
ACT_States();
ACT_SWLimitSwitch();
ACT_Stop();
ACT_Power();
ACT_Homing();
ACT_Jog();
ACT_Move();
ACT_Reset();
ACT_SetPosition();
// Device dependent commands
// Motor monitoring possible only with real axis
IF NOT Axis.Status.OpMode.SimulationAxis THEN
	ACT_MotorMonitoring();
END_IF
// Device dependent commands, possible only on real axis after complete initialization
IF bInitialized AND NOT Axis.Status.OpMode.SimulationAxis THEN
	ACT_SetPositionIO();
	ACT_DriveDiag();
	ACT_HoldingBrakeCtrl();
END_IF

// Device independent error collection
ACT_ErrorCollection();]]></ST>
    </Implementation>
    <Action Name="ACT_DriveDiag" Id="{da88c96a-ae20-457d-9557-2ab57aceb8fd}">
      <Implementation>
        <ST><![CDATA[// Auto update when drive error
tonGetDriveDiag(IN:= stMcAxisOnline.stError.bDriveError AND NOT tonGetDriveDiag.Q, PT:= T#5S, Q=> , ET=> );

fbReadChannelErrorCode(	bExecute				:= stMcAxisOnline.stChannelErrorCode.bExecute OR tonGetDriveDiag.Q,
						stDriveRef				:= stMcAxisOnline.stDriveRef,
						bBusy					=> stMcAxisOnline.stChannelErrorCode.bBusy,
						bError					=> stMcAxisOnline.stChannelErrorCode.bError,
						iAdsErrId				=> stMcAxisOnline.stChannelErrorCode.uiAdsErrId,
						iCANopenErrId			=> stMcAxisOnline.stChannelErrorCode.uiSecErrId,
						uiChannelErrorCode		=> stMcAxisOnline.stChannelErrorCode.uiChannelErrorCode,
						uiChannelErrorCodeHex	=> stMcAxisOnline.stChannelErrorCode.uiChannelErrorCodeHex);]]></ST>
      </Implementation>
    </Action>
    <Action Name="ACT_ErrorCollection" Id="{6198c589-c263-4b20-b76c-4c94dcc03a2e}">
      <Implementation>
        <ST><![CDATA[// Error flags
stMcAxisOnline.stError.bDriveError					:= Axis.Status.DriveDeviceError;

stMcAxisOnline.stError.bNcError						:= Axis.Status.Error;

stMcAxisOnline.stError.bFBError						:= stMcAxisOnline.mcPower.bError OR stMcAxisOnline.mcReset.bError OR stMcAxisOnline.mcHome.bError OR stMcAxisOnline.mcJog.bError
													OR stMcAxisOnline.mcHalt.bError OR stMcAxisOnline.mcStop.bError OR stMcAxisOnline.mcSS1.bError OR stMcAxisOnline.mcSS2.bError
													OR stMcAxisOnline.mcMoveAbsolute.bError OR stMcAxisOnline.mcMoveRelative.bError OR stMcAxisOnline.mcMoveVelocity.bError OR stMcAxisOnline.mcMoveModulo.bError
													OR stMcAxisOnline.mcMoveAbsolute2.bError OR stMcAxisOnline.mcMoveRelative2.bError OR stMcAxisOnline.mcMoveVelocity2.bError OR stMcAxisOnline.mcMoveModulo2.bError
													OR stMcAxisOnline.stNcLimitSwitch.bError OR stMcAxisOnline.mcSetPosition.bError;
									
stMcAxisOnline.stError.bCommunicationError			:= stMcAxisOnline.stChannelErrorCode.bError OR stMcAxisOnline.stSetPositionOffset.bError OR stMcAxisOnline.stMotorMonitoring.bError OR stMcAxisOnline.stHoldingBrake.bError;

stMcAxisOnline.stError.bError						:= stMcAxisOnline.stError.bDriveError OR stMcAxisOnline.stError.bNcError OR stMcAxisOnline.stError.bFBError OR stMcAxisOnline.stError.bCommunicationError;
stMcAxisOnline.bError								:= stMcAxisOnline.stError.bError; // Forward one stage up

// Error codes
stMcAxisOnline.stError.uiDriveErrorID 				:= stMcAxisOnline.stChannelErrorCode.uiChannelErrorCode;
stMcAxisOnline.stError.uiDriveErrorIDHex 			:= stMcAxisOnline.stChannelErrorCode.uiChannelErrorCodeHex;

stMcAxisOnline.stError.udiNcErrorID 				:= Axis.Status.ErrorID;
stMcAxisOnline.stError.udiNcErrorIDHex 				:= Axis.Status.ErrorID;
	

stMcAxisOnline.stError.udiFBErrorID 				:= 	stMcAxisOnline.mcPower.udiErrorID + 
														stMcAxisOnline.mcReset.udiErrorID + 
														stMcAxisOnline.mcHome.udiErrorID + 
														stMcAxisOnline.mcJog.udiErrorID +
														stMcAxisOnline.mcHalt.udiErrorID + 
														stMcAxisOnline.mcStop.udiErrorID + 
														stMcAxisOnline.mcSS1.udiErrorID + 
														stMcAxisOnline.mcSS2.udiErrorID +
														stMcAxisOnline.mcMoveAbsolute.udiErrorID + 
														stMcAxisOnline.mcMoveRelative.udiErrorID + 
														stMcAxisOnline.mcMoveVelocity.udiErrorID + 
														stMcAxisOnline.mcMoveModulo.udiErrorID +
														stMcAxisOnline.mcMoveAbsolute2.udiErrorID + 
														stMcAxisOnline.mcMoveRelative2.udiErrorID + 
														stMcAxisOnline.mcMoveVelocity2.udiErrorID + 
														stMcAxisOnline.mcMoveModulo2.udiErrorID +
														stMcAxisOnline.stNcLimitSwitch.udiErrorID + 
														stMcAxisOnline.mcSetPosition.udiErrorID;

stMcAxisOnline.stError.udiFBErrorIDHex 				:= stMcAxisOnline.stError.udiFBErrorID;

stMcAxisOnline.stError.udiErrorID					:= stMcAxisOnline.stSetPositionOffset.udiErrorID;
stMcAxisOnline.stError.uiAdsErrorID					:= stMcAxisOnline.stChannelErrorCode.uiAdsErrId + stMcAxisOnline.stMotorMonitoring.uiAdsErrId + stMcAxisOnline.stHoldingBrake.uiAdsErrId;
stMcAxisOnline.stError.uiSecErrorID					:= stMcAxisOnline.stChannelErrorCode.uiSecErrId + stMcAxisOnline.stMotorMonitoring.uiSecErrId + stMcAxisOnline.stHoldingBrake.uiSecErrId;

stMcAxisOnline.stError.sNcError						:= F_AxErrMsg(stMcAxisOnline.stError.udiNcErrorID);
stMcAxisOnline.stError.sDriveError					:= F_AX8xErrMsg(stMcAxisOnline.stError.uiDriveErrorID);]]></ST>
      </Implementation>
    </Action>
    <Action Name="ACT_HoldingBrakeCtrl" Id="{0d9ff1ba-7c88-4a3c-afca-9be9e62cf97a}">
      <Implementation>
        <ST><![CDATA[fbHoldingBrakeCtrl(	bForceLock			:= stMcAxisOnline.stHoldingBrake.bForceLock,
					bForceUnlock		:= stMcAxisOnline.stHoldingBrake.bForceUnlock,
					stDriveRef			:= stMcAxisOnline.stDriveRef,
					bBusy				=> stMcAxisOnline.stHoldingBrake.bBusy,
					bError				=> stMcAxisOnline.stHoldingBrake.bError,
					iAdsErrId			=> stMcAxisOnline.stHoldingBrake.uiAdsErrId,
					iCANopenErrId		=> stMcAxisOnline.stHoldingBrake.uiSecErrId);]]></ST>
      </Implementation>
    </Action>
    <Action Name="ACT_Homing" Id="{1b6f35bc-5424-4c22-b830-2a3e541dd27b}">
      <Implementation>
        <ST><![CDATA[mcHome(		Axis						:= Axis,
			Execute						:= stMcAxisOnline.mcHome.bExecute,
			Position					:= stMcAxisOnline.mcHome.lrPosition,
			HomingMode					:= stMcAxisOnline.mcHome.eHomingMode,
			BufferMode					:= stMcAxisOnline.mcHome.eBufferMode,
			Options						:= stMcAxisOnline.mcHome.stOptions,
			bCalibrationCam				:= stMcAxisOnline.mcHome.bCalibrationCam,
			Done						=> stMcAxisOnline.mcHome.bDone,
			Busy						=> stMcAxisOnline.mcHome.bBusy,
			Active						=> stMcAxisOnline.mcHome.bActive,
			CommandAborted				=> stMcAxisOnline.mcHome.bCommandAborted,
			Error						=> stMcAxisOnline.mcHome.bError,
			ErrorID						=> stMcAxisOnline.mcHome.udiErrorID);]]></ST>
      </Implementation>
    </Action>
    <Action Name="ACT_Initialization" Id="{c0aeb180-0c87-4374-9efa-9ff66a0f07ec}">
      <Implementation>
        <ST><![CDATA[// bInitialized flag is set just once. 
// bReInitialized ise set each time we do online change or request reinit operation
// bDriveAddressReady, bReadParameterSetReady, bDriveRefReady - set just once after successed read

// Online change detection
bOnlineChangeDetected					:= udiOnlineChangeCntOld <> _AppInfo.OnlineChangeCnt;
udiOnlineChangeCntOld 					:= _AppInfo.OnlineChangeCnt;
// Reset init
IF bReInit OR bOnlineChangeDetected THEN
	iInitStep							:= 0;
END_IF

//Initialization process
CASE iInitStep OF
	0:	// Read Drive Address
		
		stMcAxisOnline.mcReadDriveAddress.bExecute	:=	 TRUE;
		iInitStep						:= iInitStep + 10;
		
	10: // Wait for data
	
		IF NOT stMcAxisOnline.mcReadDriveAddress.bBusy THEN
			stMcAxisOnline.mcReadDriveAddress.bExecute	:=	 FALSE;
			IF stMcAxisOnline.mcReadDriveAddress.bDone THEN
				iInitStep 				:= iInitStep + 10;
				bDriveAddressReady 		:= TRUE;
			ELSE
				iInitStep 				:= 1000;		// Error step
			END_IF
		END_IF
		
	20:	// Read Parameter Set
		
		stMcAxisOnline.mcReadParameterSet.bExecute		:=	 TRUE;
		iInitStep						:= iInitStep + 10;
		
	30: // Wait for data
	
		IF NOT stMcAxisOnline.mcReadParameterSet.bBusy THEN
			stMcAxisOnline.mcReadParameterSet.bExecute	:=	 FALSE;
			IF stMcAxisOnline.mcReadParameterSet.bDone THEN
				iInitStep 				:= iInitStep + 10;
				bReadParameterSetReady 	:= TRUE;
			ELSE
				iInitStep 				:= 1000;		// Error step
			END_IF
		END_IF	
	
	40:	// Get Drive Ref
		
		stMcAxisOnline.stGetDriveRef.bExecute		:=	 TRUE;
		iInitStep						:= iInitStep + 10;
		
	50: // Wait for data
	
		IF NOT stMcAxisOnline.stGetDriveRef.bBusy THEN
			stMcAxisOnline.stGetDriveRef.bExecute	:=	 FALSE;
			IF NOT stMcAxisOnline.stGetDriveRef.bError THEN
				iInitStep 				:= iInitStep + 10;
				bDriveRefReady 			:= TRUE;
			ELSE
				iInitStep 				:= 1000;		// Error step
			END_IF
		END_IF
	
	60: // Success - initialized flag, clear error
		bReInitialized					:= bInitialized;	// TRUE only when it's not first initialization e.g. online change
		bInitialized 					:= TRUE;
		bReInitializationError			:= FALSE;			// TRUE only when it's not first initialization e.g. online change
		bInitializationError			:= FALSE;
		iInitStep 						:= iInitStep + 10;
		
	70: // Idle
	
		;
		
	1000: // Error step
		wInitializationErrorCounter 	:= wInitializationErrorCounter + 1;
		IF wInitializationErrorCounter < 100 THEN
			iInitStep					:= iInitStep + 5;			// Go to delay
		ELSE
			bReInitializationError		:= bInitializationError;	// TRUE only when it's not first initialization e.g. online change
			bInitializationError		:= TRUE;
			bReInitialized				:= FALSE;
			iInitStep 					:= iInitStep + 10;
		END_IF

	1005: // Delay step
		tonDelay(IN:= TRUE, PT:= T#1S);
		IF tonDelay.Q THEN
			tonDelay(IN:= FALSE, PT:= T#1S);
			iInitStep					:= 0;
		END_IF
		
	1010: // Idle after error
		;
	
END_CASE

mcReadDriveAddress(	Axis				:= Axis,
					Execute				:= stMcAxisOnline.mcReadDriveAddress.bExecute,
					Done				=> stMcAxisOnline.mcReadDriveAddress.bDone,
					Busy				=> stMcAxisOnline.mcReadDriveAddress.bBusy,
					Error				=> stMcAxisOnline.mcReadDriveAddress.bError,
					ErrorID				=> stMcAxisOnline.mcReadDriveAddress.udiErrorID,
					DriveAddress		=> stMcAxisOnline.stDriveAddress);
				
mcReadParameterSet(	Parameter			:= stMcAxisOnline.stAxisParameter,
					Axis				:= Axis,
					Execute				:= stMcAxisOnline.mcReadParameterSet.bExecute,
					Done				=> stMcAxisOnline.mcReadParameterSet.bDone,
					Busy				=> stMcAxisOnline.mcReadParameterSet.bBusy,
					Error				=> stMcAxisOnline.mcReadParameterSet.bError,
					ErrorID				=> stMcAxisOnline.mcReadParameterSet.udiErrorID);
					
fbGetDriveRef(		bExecute			:= stMcAxisOnline.stGetDriveRef.bExecute,
					bBusy				=> stMcAxisOnline.stGetDriveRef.bBusy,
					bError				=> stMcAxisOnline.stGetDriveRef.bError,
					udiErrorID			=> stMcAxisOnline.stGetDriveRef.udiErrorID,
					stDriveRef			=> stMcAxisOnline.stDriveRef,
					Axis				:= Axis);
]]></ST>
      </Implementation>
    </Action>
    <Action Name="ACT_Jog" Id="{62507b14-e0b1-4dbf-a1cf-1b16be0ec5ee}">
      <Implementation>
        <ST><![CDATA[// Direct access from bSlow or bFast, if none then free choice
IF stMcAxisOnline.mcJog.bSlowForward OR stMcAxisOnline.mcJog.bSlowBackward THEN
	stMcAxisOnline.mcJog.eMode			:= MC_JOGMODE_STANDARD_SLOW;
ELSIF stMcAxisOnline.mcJog.bFastForward OR stMcAxisOnline.mcJog.bFastBackward THEN
	stMcAxisOnline.mcJog.eMode			:= MC_JOGMODE_STANDARD_FAST;
END_IF

mcJog(		Axis						:= Axis,
			JogForward					:= stMcAxisOnline.mcJog.bJogForward OR stMcAxisOnline.mcJog.bSlowForward OR stMcAxisOnline.mcJog.bFastForward,
			JogBackwards				:= stMcAxisOnline.mcJog.bJogBackwards OR stMcAxisOnline.mcJog.bSlowBackward OR stMcAxisOnline.mcJog.bFastBackward,
			Mode						:= stMcAxisOnline.mcJog.eMode,
			Position					:= stMcAxisOnline.mcJog.lrPosition,
			Velocity					:= stMcAxisOnline.mcJog.lrVelocity,
			Acceleration				:= stMcAxisOnline.mcJog.lrAcceleration,
			Deceleration				:= stMcAxisOnline.mcJog.lrDeceleration,
			Jerk						:= stMcAxisOnline.mcJog.lrJerk,
			Done						=> stMcAxisOnline.mcJog.bDone,
			Busy						=> stMcAxisOnline.mcJog.bBusy,
			Active						=> stMcAxisOnline.mcJog.bActive,
			CommandAborted				=> stMcAxisOnline.mcJog.bCommandAborted,
			Error						=> stMcAxisOnline.mcJog.bError,
			ErrorID						=> stMcAxisOnline.mcJog.udiErrorID);]]></ST>
      </Implementation>
    </Action>
    <Action Name="ACT_MotorMonitoring" Id="{5f8d84ad-a04e-487e-8292-2a28398d4400}">
      <Implementation>
        <ST><![CDATA[fbMotorMonitoring(	bReset				:= stMcAxisOnline.stMotorMonitoring.bReset,
					rTorqueLimit		:= stMcAxisOnline.stMotorMonitoring.rTorqueLimit,
					stDriveRef			:= stMcAxisOnline.stDriveRef,
					bError				=> stMcAxisOnline.stMotorMonitoring.bError,
					uiAdsErrId			=> stMcAxisOnline.stMotorMonitoring.uiAdsErrId,
					uiCANopenErrId		=> stMcAxisOnline.stMotorMonitoring.uiSecErrId,
					bInitialized		=> stMcAxisOnline.stMotorMonitoring.bInitialized,
					bWarning			=> stMcAxisOnline.stMotorMonitoring.bWarning,
					rWarningCurrent		=> stMcAxisOnline.stMotorMonitoring.rWarningCurrent,
					rTorquePerc			=> stMcAxisOnline.stMotorMonitoring.rTorquePerc,
					rTorquePercMax		=> stMcAxisOnline.stMotorMonitoring.rTorquePercMax,
					rTorque				=> stMcAxisOnline.stMotorMonitoring.rTorque,
					rTorqueF			=> stMcAxisOnline.stMotorMonitoring.rTorqueF,
					rTorqueMax			=> stMcAxisOnline.stMotorMonitoring.rTorqueMax,
					rCurrent			=> stMcAxisOnline.stMotorMonitoring.rCurrent,
					rCurrentF			=> stMcAxisOnline.stMotorMonitoring.rCurrentF,
					rCurrentMax			=> stMcAxisOnline.stMotorMonitoring.rCurrentMax,
					rI2T				=> stMcAxisOnline.stMotorMonitoring.rI2T,
					rI2TMax				=> stMcAxisOnline.stMotorMonitoring.rI2TMax,
					Axis				:= Axis);]]></ST>
      </Implementation>
    </Action>
    <Action Name="ACT_Move" Id="{396cbcd1-adc0-4908-ae9e-1fa271f968ee}">
      <Implementation>
        <ST><![CDATA[{region "Primary"}
mcMoveAbsolute(	Axis					:= Axis,
				Execute					:= stMcAxisOnline.mcMoveAbsolute.bExecute,
				Position				:= stMcAxisOnline.mcMoveAbsolute.lrPosition,
				Velocity				:= stMcAxisOnline.mcMoveAbsolute.lrVelocity,
				Acceleration			:= stMcAxisOnline.mcMoveAbsolute.lrAcceleration,
				Deceleration			:= stMcAxisOnline.mcMoveAbsolute.lrDeceleration,
				Jerk					:= stMcAxisOnline.mcMoveAbsolute.lrJerk,
				BufferMode				:= stMcAxisOnline.mcMoveAbsolute.eBufferMode,
				Options					:= stMcAxisOnline.mcMoveAbsolute.stOptions,
				Done					=> stMcAxisOnline.mcMoveAbsolute.bDone,
				Busy					=> stMcAxisOnline.mcMoveAbsolute.bBusy,
				Active					=> stMcAxisOnline.mcMoveAbsolute.bActive,
				CommandAborted			=> stMcAxisOnline.mcMoveAbsolute.bCommandAborted,
				Error					=> stMcAxisOnline.mcMoveAbsolute.bError,
				ErrorID					=> stMcAxisOnline.mcMoveAbsolute.udiErrorID);

mcMoveRelative(	Axis					:= Axis,
				Execute					:= stMcAxisOnline.mcMoveRelative.bExecute,
				Distance				:= stMcAxisOnline.mcMoveRelative.lrDistance,
				Velocity				:= stMcAxisOnline.mcMoveRelative.lrVelocity,
				Acceleration			:= stMcAxisOnline.mcMoveRelative.lrAcceleration,
				Deceleration			:= stMcAxisOnline.mcMoveRelative.lrDeceleration,
				Jerk					:= stMcAxisOnline.mcMoveRelative.lrJerk,
				BufferMode				:= stMcAxisOnline.mcMoveRelative.eBufferMode,
				Options					:= stMcAxisOnline.mcMoveRelative.stOptions,
				Done					=> stMcAxisOnline.mcMoveRelative.bDone,
				Busy					=> stMcAxisOnline.mcMoveRelative.bBusy,
				Active					=> stMcAxisOnline.mcMoveRelative.bActive,
				CommandAborted			=> stMcAxisOnline.mcMoveRelative.bCommandAborted,
				Error					=> stMcAxisOnline.mcMoveRelative.bError,
				ErrorID					=> stMcAxisOnline.mcMoveRelative.udiErrorID);
				
mcMoveVelocity(	Axis					:= Axis,
				Execute					:= stMcAxisOnline.mcMoveVelocity.bExecute,
				Velocity				:= stMcAxisOnline.mcMoveVelocity.lrVelocity,
				Acceleration			:= stMcAxisOnline.mcMoveVelocity.lrAcceleration,
				Deceleration			:= stMcAxisOnline.mcMoveVelocity.lrDeceleration,
				Jerk					:= stMcAxisOnline.mcMoveVelocity.lrJerk,
				Direction				:= stMcAxisOnline.mcMoveVelocity.eDirection,
				BufferMode				:= stMcAxisOnline.mcMoveVelocity.eBufferMode,
				Options					:= stMcAxisOnline.mcMoveVelocity.stOptions,
				InVelocity				=> stMcAxisOnline.mcMoveVelocity.bInVelocity,
				Busy					=> stMcAxisOnline.mcMoveVelocity.bBusy,
				Active					=> stMcAxisOnline.mcMoveVelocity.bActive,
				CommandAborted			=> stMcAxisOnline.mcMoveVelocity.bCommandAborted,
				Error					=> stMcAxisOnline.mcMoveVelocity.bError,
				ErrorID					=> stMcAxisOnline.mcMoveVelocity.udiErrorID);
stMcAxisOnline.mcMoveVelocity.bDone		:= stMcAxisOnline.mcMoveVelocity.bInVelocity;

mcMoveModulo(	Axis					:= Axis,
				Execute					:= stMcAxisOnline.mcMoveModulo.bExecute,
				Position				:= stMcAxisOnline.mcMoveModulo.lrPosition,
				Velocity				:= stMcAxisOnline.mcMoveModulo.lrVelocity,
				Acceleration			:= stMcAxisOnline.mcMoveModulo.lrAcceleration,
				Deceleration			:= stMcAxisOnline.mcMoveModulo.lrDeceleration,
				Jerk					:= stMcAxisOnline.mcMoveModulo.lrJerk,
				Direction				:= stMcAxisOnline.mcMoveModulo.eDirection,
				BufferMode				:= stMcAxisOnline.mcMoveModulo.eBufferMode,
				Options					:= stMcAxisOnline.mcMoveModulo.stOptions,
				Done					=> stMcAxisOnline.mcMoveModulo.bDone,
				Busy					=> stMcAxisOnline.mcMoveModulo.bBusy,
				Active					=> stMcAxisOnline.mcMoveModulo.bActive,
				CommandAborted			=> stMcAxisOnline.mcMoveModulo.bCommandAborted,
				Error					=> stMcAxisOnline.mcMoveModulo.bError,
				ErrorID					=> stMcAxisOnline.mcMoveModulo.udiErrorID);
{endregion}
{region "Secondary"}
mcMoveAbsolute2(Axis					:= Axis,
				Execute					:= stMcAxisOnline.mcMoveAbsolute2.bExecute,
				Position				:= stMcAxisOnline.mcMoveAbsolute2.lrPosition,
				Velocity				:= stMcAxisOnline.mcMoveAbsolute2.lrVelocity,
				Acceleration			:= stMcAxisOnline.mcMoveAbsolute2.lrAcceleration,
				Deceleration			:= stMcAxisOnline.mcMoveAbsolute2.lrDeceleration,
				Jerk					:= stMcAxisOnline.mcMoveAbsolute2.lrJerk,
				BufferMode				:= stMcAxisOnline.mcMoveAbsolute2.eBufferMode,
				Options					:= stMcAxisOnline.mcMoveAbsolute2.stOptions,
				Done					=> stMcAxisOnline.mcMoveAbsolute2.bDone,
				Busy					=> stMcAxisOnline.mcMoveAbsolute2.bBusy,
				Active					=> stMcAxisOnline.mcMoveAbsolute2.bActive,
				CommandAborted			=> stMcAxisOnline.mcMoveAbsolute2.bCommandAborted,
				Error					=> stMcAxisOnline.mcMoveAbsolute2.bError,
				ErrorID					=> stMcAxisOnline.mcMoveAbsolute2.udiErrorID);

mcMoveRelative2(Axis					:= Axis,
				Execute					:= stMcAxisOnline.mcMoveRelative2.bExecute,
				Distance				:= stMcAxisOnline.mcMoveRelative2.lrDistance,
				Velocity				:= stMcAxisOnline.mcMoveRelative2.lrVelocity,
				Acceleration			:= stMcAxisOnline.mcMoveRelative2.lrAcceleration,
				Deceleration			:= stMcAxisOnline.mcMoveRelative2.lrDeceleration,
				Jerk					:= stMcAxisOnline.mcMoveRelative2.lrJerk,
				BufferMode				:= stMcAxisOnline.mcMoveRelative2.eBufferMode,
				Options					:= stMcAxisOnline.mcMoveRelative2.stOptions,
				Done					=> stMcAxisOnline.mcMoveRelative2.bDone,
				Busy					=> stMcAxisOnline.mcMoveRelative2.bBusy,
				Active					=> stMcAxisOnline.mcMoveRelative2.bActive,
				CommandAborted			=> stMcAxisOnline.mcMoveRelative2.bCommandAborted,
				Error					=> stMcAxisOnline.mcMoveRelative2.bError,
				ErrorID					=> stMcAxisOnline.mcMoveRelative2.udiErrorID);
				
mcMoveVelocity2(Axis					:= Axis,
				Execute					:= stMcAxisOnline.mcMoveVelocity2.bExecute,
				Velocity				:= stMcAxisOnline.mcMoveVelocity2.lrVelocity,
				Acceleration			:= stMcAxisOnline.mcMoveVelocity2.lrAcceleration,
				Deceleration			:= stMcAxisOnline.mcMoveVelocity2.lrDeceleration,
				Jerk					:= stMcAxisOnline.mcMoveVelocity2.lrJerk,
				Direction				:= stMcAxisOnline.mcMoveVelocity2.eDirection,
				BufferMode				:= stMcAxisOnline.mcMoveVelocity2.eBufferMode,
				Options					:= stMcAxisOnline.mcMoveVelocity2.stOptions,
				InVelocity				=> stMcAxisOnline.mcMoveVelocity2.bInVelocity,
				Busy					=> stMcAxisOnline.mcMoveVelocity2.bBusy,
				Active					=> stMcAxisOnline.mcMoveVelocity2.bActive,
				CommandAborted			=> stMcAxisOnline.mcMoveVelocity2.bCommandAborted,
				Error					=> stMcAxisOnline.mcMoveVelocity2.bError,
				ErrorID					=> stMcAxisOnline.mcMoveVelocity2.udiErrorID);
stMcAxisOnline.mcMoveVelocity2.bDone	:= stMcAxisOnline.mcMoveVelocity2.bInVelocity;

mcMoveModulo2(	Axis					:= Axis,
				Execute					:= stMcAxisOnline.mcMoveModulo2.bExecute,
				Position				:= stMcAxisOnline.mcMoveModulo2.lrPosition,
				Velocity				:= stMcAxisOnline.mcMoveModulo2.lrVelocity,
				Acceleration			:= stMcAxisOnline.mcMoveModulo2.lrAcceleration,
				Deceleration			:= stMcAxisOnline.mcMoveModulo2.lrDeceleration,
				Jerk					:= stMcAxisOnline.mcMoveModulo2.lrJerk,
				Direction				:= stMcAxisOnline.mcMoveModulo2.eDirection,
				BufferMode				:= stMcAxisOnline.mcMoveModulo2.eBufferMode,
				Options					:= stMcAxisOnline.mcMoveModulo2.stOptions,
				Done					=> stMcAxisOnline.mcMoveModulo2.bDone,
				Busy					=> stMcAxisOnline.mcMoveModulo2.bBusy,
				Active					=> stMcAxisOnline.mcMoveModulo2.bActive,
				CommandAborted			=> stMcAxisOnline.mcMoveModulo2.bCommandAborted,
				Error					=> stMcAxisOnline.mcMoveModulo2.bError,
				ErrorID					=> stMcAxisOnline.mcMoveModulo2.udiErrorID);
{endregion}]]></ST>
      </Implementation>
    </Action>
    <Action Name="ACT_Power" Id="{d1f74fac-cb54-4d40-a6a9-fdf061efd816}">
      <Implementation>
        <ST><![CDATA[mcPower(	Axis						:= Axis,									//
			Enable						:= stMcAxisOnline.mcPower.bEnable,
			Enable_Positive				:= stMcAxisOnline.mcPower.bEnable_Positive,
			Enable_Negative				:= stMcAxisOnline.mcPower.bEnable_Negative,
			Override					:= stMcAxisOnline.mcPower.lrOverride,
			BufferMode					:= stMcAxisOnline.mcPower.eBufferMode,
			Options						:= stMcAxisOnline.mcPower.stOptions,
			Status						=> stMcAxisOnline.mcPower.bStatus,
			Busy						=> stMcAxisOnline.mcPower.bBusy,
			Active						=> stMcAxisOnline.mcPower.bActive,
			Error						=> stMcAxisOnline.mcPower.bError,
			ErrorID						=> stMcAxisOnline.mcPower.udiErrorID);]]></ST>
      </Implementation>
    </Action>
    <Action Name="ACT_Reset" Id="{4caf90a9-802e-4329-a568-352847433ecd}">
      <Implementation>
        <ST><![CDATA[mcReset(	Axis						:= Axis,
			Execute						:= stMcAxisOnline.mcReset.bExecute,
			Done						=> stMcAxisOnline.mcReset.bDone,
			Busy						=> stMcAxisOnline.mcReset.bBusy,
			Error						=> stMcAxisOnline.mcReset.bError,
			ErrorID						=> stMcAxisOnline.mcReset.udiErrorID);]]></ST>
      </Implementation>
    </Action>
    <Action Name="ACT_SetPosition" Id="{ae6f15db-e003-4bef-9d3c-6f4b43cb7155}">
      <Implementation>
        <ST><![CDATA[mcSetPosition(		Axis				:= Axis,
					Execute				:= stMcAxisOnline.mcSetPosition.bExecute,
					Position			:= stMcAxisOnline.mcSetPosition.lrPosition,
					Mode				:= stMcAxisOnline.mcSetPosition.bMode,
					Options				:= stMcAxisOnline.mcSetPosition.stOptions,
					Done				=> stMcAxisOnline.mcSetPosition.bDone,
					Busy				=> stMcAxisOnline.mcSetPosition.bBusy,
					Error				=> stMcAxisOnline.mcSetPosition.bError,
					ErrorID				=> stMcAxisOnline.mcSetPosition.udiErrorID);
]]></ST>
      </Implementation>
    </Action>
    <Action Name="ACT_SetPositionIO" Id="{ce636aaa-0e7c-4136-8ac0-ea07a35eed51}">
      <Implementation>
        <ST><![CDATA[fbSetPositionOffset(Execute				:= stMcAxisOnline.stSetPositionOffset.bExecute,
					Position			:= stMcAxisOnline.stSetPositionOffset.lrPosition,
					Relative			:= stMcAxisOnline.stSetPositionOffset.bRelative,
					Feedback			:= stMcAxisOnline.stSetPositionOffset.eFeedback,
					Memory				:= stMcAxisOnline.stSetPositionOffset.eMemory,
					Busy				=> stMcAxisOnline.stSetPositionOffset.bBusy,
					Error				=> stMcAxisOnline.stSetPositionOffset.bError,
					ErrorID				=> stMcAxisOnline.stSetPositionOffset.udiErrorID,
					Axis				:= Axis);]]></ST>
      </Implementation>
    </Action>
    <Action Name="ACT_States" Id="{68a0b3eb-37ae-48cc-b272-80f1b8f1e9bf}">
      <Implementation>
        <ST><![CDATA[// Read States and forward main states
Axis.ReadStatus();
stMcAxisOnline.stStatus.stAxisStatus		:= Axis.Status;
stMcAxisOnline.stStatus.dwAxisId			:= Axis.NcToPlc.AxisId;
stMcAxisOnline.stStatus.bNcError			:= Axis.Status.Error;
stMcAxisOnline.stStatus.udiNcErrorCode		:= Axis.Status.ErrorID;
stMcAxisOnline.stStatus.udiNcErrorCodeHex	:= Axis.Status.ErrorID;

stMcAxisOnline.stStatus.sAxisName			:= stMcAxisOnline.stAxisParameter.sAxisName;
stMcAxisOnline.stStatus.lrActPos			:= Axis.NcToPlc.ActPos;
stMcAxisOnline.stStatus.lrModuloActPos		:= Axis.NcToPlc.ModuloActPos;
stMcAxisOnline.stStatus.lrActVelo			:= Axis.NcToPlc.ActVelo;
stMcAxisOnline.stStatus.lrActAcc			:= Axis.NcToPlc.ActAcc;
stMcAxisOnline.stStatus.lrActTorque			:= Axis.NcToPlc.ActTorque;
stMcAxisOnline.stStatus.lrPosDiff			:= Axis.NcToPlc.PosDiff;
stMcAxisOnline.stStatus.lrSetPos			:= Axis.NcToPlc.SetPos;
stMcAxisOnline.stStatus.lrSetVelo			:= Axis.NcToPlc.SetVelo;
stMcAxisOnline.stStatus.lrSetAcc			:= Axis.NcToPlc.SetAcc;
stMcAxisOnline.stStatus.lrSetTorque			:= Axis.NcToPlc.SetTorque;
stMcAxisOnline.stStatus.lrPosDiff			:= Axis.NcToPlc.PosDiff;
stMcAxisOnline.stStatus.bAxisReady			:= Axis.Status.Operational;
stMcAxisOnline.stStatus.bHomed				:= Axis.Status.Homed;
stMcAxisOnline.stStatus.bCoupled			:= Axis.Status.Coupled;

// zezwolenie na zjazd z krancowki hw
Axis.PlcToNc.ControlDWord.8				:= stMcAxisOnline.stStatus.bAcceptBlockedDrive;]]></ST>
      </Implementation>
    </Action>
    <Action Name="ACT_Stop" Id="{68417ada-e4f4-44ba-a4dc-f34a38d1c561}">
      <Implementation>
        <ST><![CDATA[mcHalt(		Axis						:= Axis,
			Execute						:= stMcAxisOnline.mcHalt.bExecute,
			Deceleration				:= stMcAxisOnline.mcHalt.lrDeceleration,
			Jerk						:= stMcAxisOnline.mcHalt.lrJerk,
			BufferMode					:= stMcAxisOnline.mcHalt.eBufferMode,
			Options						:= stMcAxisOnline.mcHalt.stOptions,
			Done						=> stMcAxisOnline.mcHalt.bDone,
			Busy						=> stMcAxisOnline.mcHalt.bBusy,
			Active						=> stMcAxisOnline.mcHalt.bActive,
			CommandAborted				=> stMcAxisOnline.mcHalt.bCommandAborted,
			Error						=> stMcAxisOnline.mcHalt.bError,
			ErrorID						=> stMcAxisOnline.mcHalt.udiErrorID);
			
mcStop(		Axis						:= Axis,
			Execute						:= stMcAxisOnline.mcStop.bExecute,
			Deceleration				:= stMcAxisOnline.mcStop.lrDeceleration,
			Jerk						:= stMcAxisOnline.mcStop.lrJerk,
			Options						:= stMcAxisOnline.mcStop.stOptions,
			Done						=> stMcAxisOnline.mcStop.bDone,
			Busy						=> stMcAxisOnline.mcStop.bBusy,
			Active						=> stMcAxisOnline.mcStop.bActive,
			CommandAborted				=> stMcAxisOnline.mcStop.bCommandAborted,
			Error						=> stMcAxisOnline.mcStop.bError,
			ErrorID						=> stMcAxisOnline.mcStop.udiErrorID);
			
mcStopSS2(	Axis						:= Axis,
			Execute						:= stMcAxisOnline.mcSS2.bExecute,
			Deceleration				:= stMcAxisOnline.mcSS2.lrDeceleration,
			Jerk						:= stMcAxisOnline.mcSS2.lrJerk,
			Options						:= stMcAxisOnline.mcSS2.stOptions,
			Done						=> stMcAxisOnline.mcSS2.bDone,
			Busy						=> stMcAxisOnline.mcSS2.bBusy,
			Active						=> stMcAxisOnline.mcSS2.bActive,
			CommandAborted				=> stMcAxisOnline.mcSS2.bCommandAborted,
			Error						=> stMcAxisOnline.mcSS2.bError,
			ErrorID						=> stMcAxisOnline.mcSS2.udiErrorID);
			
mcStopSS1(	Axis						:= Axis,
			Execute						:= stMcAxisOnline.mcSS1.bExecute,
			Deceleration				:= stMcAxisOnline.mcSS1.lrDeceleration,
			Jerk						:= stMcAxisOnline.mcSS1.lrJerk,
			Options						:= stMcAxisOnline.mcSS1.stOptions,
			Done						=> stMcAxisOnline.mcSS1.bDone,
			Busy						=> stMcAxisOnline.mcSS1.bBusy,
			Active						=> stMcAxisOnline.mcSS1.bActive,
			CommandAborted				=> stMcAxisOnline.mcSS1.bCommandAborted,
			Error						=> stMcAxisOnline.mcSS1.bError,
			ErrorID						=> stMcAxisOnline.mcSS1.udiErrorID);
// SS1 - after MC_Stop function we have to disable drive			
stMcAxisOnline.mcPower.bEnable R= stMcAxisOnline.mcPower.bEnable_Positive R= stMcAxisOnline.mcPower.bEnable_Negative R= (stMcAxisOnline.mcSS1.bDone OR stMcAxisOnline.mcSS1.bCommandAborted OR stMcAxisOnline.mcSS1.bError);]]></ST>
      </Implementation>
    </Action>
    <Action Name="ACT_SWLimitSwitch" Id="{1ce7af2a-cd64-4ca1-9106-03648cbfd346}">
      <Implementation>
        <ST><![CDATA[fbNcLimitSwitch(	udiAxisID		:= Axis.NcToPlc.AxisId, 
					bRead			:= stMcAxisOnline.stNcLimitSwitch.bRead, 
					bWrite			:= stMcAxisOnline.stNcLimitSwitch.bWrite, 
					bReset			:= stMcAxisOnline.stNcLimitSwitch.bReset, 
					lrSetMinPos		:= stMcAxisOnline.stNcLimitSwitch.lrSetMinPos, 
					lrSetMaxPos		:= stMcAxisOnline.stNcLimitSwitch.lrSetMaxPos, 
					bSetMinMon		:= stMcAxisOnline.stNcLimitSwitch.bSetMinMon, 
					bSetMaxMon		:= stMcAxisOnline.stNcLimitSwitch.bSetMaxMon, 
					bBusy			=> stMcAxisOnline.stNcLimitSwitch.bBusy, 
					bError			=> stMcAxisOnline.stNcLimitSwitch.bError, 
					udiErrorID		=> stMcAxisOnline.stNcLimitSwitch.udiErrorID, 
					lrActMinPos		=> stMcAxisOnline.stNcLimitSwitch.lrActMinPos, 
					lrActMaxPos		=> stMcAxisOnline.stNcLimitSwitch.lrActMaxPos, 
					bActMinMon		=> stMcAxisOnline.stNcLimitSwitch.bActMinMon, 
					bActMaxMon		=> stMcAxisOnline.stNcLimitSwitch.bActMaxMon);]]></ST>
      </Implementation>
    </Action>
    <LineIds Name="FB_McAxisOnlineAX8000">
      <LineId Id="762" Count="12" />
      <LineId Id="861" Count="0" />
      <LineId Id="857" Count="0" />
      <LineId Id="860" Count="0" />
      <LineId Id="856" Count="0" />
      <LineId Id="776" Count="7" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_McAxisOnlineAX8000.ACT_DriveDiag">
      <LineId Id="26" Count="0" />
      <LineId Id="24" Count="1" />
      <LineId Id="15" Count="0" />
      <LineId Id="17" Count="5" />
      <LineId Id="14" Count="0" />
    </LineIds>
    <LineIds Name="FB_McAxisOnlineAX8000.ACT_ErrorCollection">
      <LineId Id="328" Count="0" />
      <LineId Id="293" Count="0" />
      <LineId Id="305" Count="0" />
      <LineId Id="295" Count="9" />
      <LineId Id="291" Count="1" />
      <LineId Id="327" Count="0" />
      <LineId Id="323" Count="0" />
      <LineId Id="309" Count="1" />
      <LineId Id="326" Count="0" />
      <LineId Id="315" Count="1" />
      <LineId Id="324" Count="0" />
      <LineId Id="319" Count="0" />
      <LineId Id="332" Count="0" />
      <LineId Id="336" Count="2" />
      <LineId Id="333" Count="0" />
      <LineId Id="339" Count="2" />
      <LineId Id="334" Count="0" />
      <LineId Id="342" Count="2" />
      <LineId Id="335" Count="0" />
      <LineId Id="345" Count="0" />
      <LineId Id="347" Count="1" />
      <LineId Id="320" Count="0" />
      <LineId Id="349" Count="0" />
      <LineId Id="329" Count="0" />
      <LineId Id="311" Count="0" />
      <LineId Id="352" Count="0" />
      <LineId Id="350" Count="0" />
      <LineId Id="355" Count="0" />
      <LineId Id="354" Count="0" />
      <LineId Id="357" Count="1" />
      <LineId Id="356" Count="0" />
    </LineIds>
    <LineIds Name="FB_McAxisOnlineAX8000.ACT_HoldingBrakeCtrl">
      <LineId Id="2" Count="0" />
      <LineId Id="4" Count="4" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_McAxisOnlineAX8000.ACT_Homing">
      <LineId Id="2" Count="0" />
      <LineId Id="4" Count="4" />
      <LineId Id="15" Count="5" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_McAxisOnlineAX8000.ACT_Initialization">
      <LineId Id="176" Count="0" />
      <LineId Id="179" Count="0" />
      <LineId Id="177" Count="1" />
      <LineId Id="155" Count="1" />
      <LineId Id="154" Count="0" />
      <LineId Id="158" Count="0" />
      <LineId Id="130" Count="0" />
      <LineId Id="141" Count="0" />
      <LineId Id="133" Count="0" />
      <LineId Id="159" Count="0" />
      <LineId Id="131" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="44" Count="3" />
      <LineId Id="42" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="49" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="53" Count="0" />
      <LineId Id="56" Count="0" />
      <LineId Id="52" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="100" Count="0" />
      <LineId Id="102" Count="12" />
      <LineId Id="117" Count="1" />
      <LineId Id="101" Count="0" />
      <LineId Id="59" Count="0" />
      <LineId Id="64" Count="12" />
      <LineId Id="79" Count="1" />
      <LineId Id="63" Count="0" />
      <LineId Id="81" Count="0" />
      <LineId Id="119" Count="0" />
      <LineId Id="122" Count="0" />
      <LineId Id="121" Count="0" />
      <LineId Id="173" Count="1" />
      <LineId Id="162" Count="4" />
      <LineId Id="60" Count="0" />
      <LineId Id="144" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="146" Count="0" />
      <LineId Id="149" Count="0" />
      <LineId Id="151" Count="0" />
      <LineId Id="167" Count="0" />
      <LineId Id="153" Count="0" />
      <LineId Id="175" Count="0" />
      <LineId Id="171" Count="0" />
      <LineId Id="148" Count="0" />
      <LineId Id="181" Count="0" />
      <LineId Id="168" Count="0" />
      <LineId Id="183" Count="0" />
      <LineId Id="185" Count="1" />
      <LineId Id="184" Count="0" />
      <LineId Id="180" Count="0" />
      <LineId Id="187" Count="0" />
      <LineId Id="169" Count="1" />
      <LineId Id="43" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="23" Count="4" />
      <LineId Id="20" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="12" Count="4" />
      <LineId Id="9" Count="0" />
      <LineId Id="124" Count="5" />
      <LineId Id="35" Count="0" />
      <LineId Id="17" Count="0" />
    </LineIds>
    <LineIds Name="FB_McAxisOnlineAX8000.ACT_Jog">
      <LineId Id="24" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="4" Count="12" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_McAxisOnlineAX8000.ACT_MotorMonitoring">
      <LineId Id="41" Count="18" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_McAxisOnlineAX8000.ACT_Move">
      <LineId Id="227" Count="0" />
      <LineId Id="234" Count="63" />
      <LineId Id="229" Count="0" />
      <LineId Id="228" Count="0" />
      <LineId Id="232" Count="0" />
      <LineId Id="298" Count="63" />
      <LineId Id="233" Count="0" />
      <LineId Id="230" Count="0" />
    </LineIds>
    <LineIds Name="FB_McAxisOnlineAX8000.ACT_Power">
      <LineId Id="2" Count="0" />
      <LineId Id="4" Count="9" />
      <LineId Id="16" Count="0" />
    </LineIds>
    <LineIds Name="FB_McAxisOnlineAX8000.ACT_Reset">
      <LineId Id="2" Count="0" />
      <LineId Id="4" Count="3" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_McAxisOnlineAX8000.ACT_SetPosition">
      <LineId Id="2" Count="0" />
      <LineId Id="4" Count="6" />
      <LineId Id="1" Count="0" />
      <LineId Id="12" Count="0" />
    </LineIds>
    <LineIds Name="FB_McAxisOnlineAX8000.ACT_SetPositionIO">
      <LineId Id="3" Count="7" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_McAxisOnlineAX8000.ACT_States">
      <LineId Id="2" Count="1" />
      <LineId Id="44" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="61" Count="1" />
      <LineId Id="60" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="75" Count="1" />
      <LineId Id="7" Count="0" />
      <LineId Id="63" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="67" Count="3" />
      <LineId Id="66" Count="0" />
      <LineId Id="73" Count="1" />
      <LineId Id="23" Count="0" />
      <LineId Id="26" Count="1" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_McAxisOnlineAX8000.ACT_Stop">
      <LineId Id="2" Count="0" />
      <LineId Id="4" Count="9" />
      <LineId Id="1" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="41" Count="2" />
      <LineId Id="45" Count="5" />
      <LineId Id="15" Count="0" />
      <LineId Id="64" Count="10" />
      <LineId Id="63" Count="0" />
      <LineId Id="76" Count="10" />
      <LineId Id="75" Count="0" />
      <LineId Id="87" Count="0" />
      <LineId Id="89" Count="0" />
    </LineIds>
    <LineIds Name="FB_McAxisOnlineAX8000.ACT_SWLimitSwitch">
      <LineId Id="2" Count="13" />
      <LineId Id="1" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>