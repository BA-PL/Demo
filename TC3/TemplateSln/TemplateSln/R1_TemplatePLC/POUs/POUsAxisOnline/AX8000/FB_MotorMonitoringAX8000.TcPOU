<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.12">
  <POU Name="FB_MotorMonitoringAX8000" Id="{9ce896be-3a35-4e9d-819a-eb269867b5dc}" SpecialFunc="None">
    <Declaration><![CDATA[//==================================================================================================
//							Beckhoff Automation Poland
//									4.07.2018
//	Blok funkcyjny pozwala na monitorowanie i ograniczanie momentu oraz monitoring parametru I2T dla AX8xxx.
//	Zmienne do zlinkowania zadeklarowane są wewnątrz bloku.
//	Ograniczenie i monitorowanie momentu
//	Ograniczenie momentu podawane jest przez wejście rTorqueLimit.
//	Na wyjściu podana jest wartość surowa w %, jak i przeskalowana na A (prąd) i Nm (moment).
//	Blok zwraca wartości bieżące, przefiltrowane i maksymalne.
//	Wartości maksymalne mogą być wyzerowane za pomocą zmiennej bReset.
//	Wewnętrznie wykorzystany jest blok FB_FilterEx.
//
//  v1.3	|| TC v 3.1.4022.22		|| - reset na poczatku bloku, optymalizacja kodu
//  v1.2	|| TC v 3.1.4022.16		|| - inicjalizacja po 10 nieudanych probach zglasza blad
//  v1.1	|| TC v 3.1.4022.16		|| - wyjscie iTorque przeniesione do lokalnych, w jego miejsce rTorquePerc i rTorquePercMax, 
//										flaga bTorqueLimitOK zalezna tylko od rTorqueLimitLow, zmiana nazw zgodnie z typami: uiAdsErrId, uiCANopenErrId
//  v1.0	|| TC v 3.1.4022.16		|| - pierwsza wersja
//==================================================================================================
FUNCTION_BLOCK FB_MotorMonitoringAX8000
VAR CONSTANT
	rTorqueLimitLow					: REAL 		:= 0.01;				// Low limit used for bipolar torque limit value
	rTorqueLimitHigh				: REAL		:= 500.0;				// High limit used for bipolar torque limit value
END_VAR
VAR_INPUT
	bReset							: BOOL;								// Reset FB
	rTorqueLimit					: REAL 		:= rTorqueLimitHigh; 	// Bipolar torque limit: 0-500%, resolution 0.1%, value goes to: 16#6072 (Ch A)/ 16#6872 (Ch B)
	stDriveRef						: ST_DriveRef;						// Necessary for FB_CoERead_ByDriveRef
END_VAR
VAR_OUTPUT
	bError							: BOOL; 							// General error: parameter or CoE read.
																		// If bError = TRUE and bInitialized = FALSE - error during read motor data.
																		// If bError = TRUE and bInitialized = TRUE and (iAdsErrId <> 0 or iCANopenErrId <> 0) then I2T read error
																		// If bError = TRUE and bInitialized = TRUE and iAdsErrId = 0 and iCANopenErrId = 0 then parameter error: rTorqueLimit outside permitted range rTorqueLimitLow..rTorqueLimitHigh or Empty stDriveRef
	uiAdsErrId						: UINT;								// Forwarded output FB_CoERead_ByDriveRef
	uiCANopenErrId					: UINT;								// Forwarded output FB_CoERead_ByDriveRef
	bInitialized					: BOOL;								// TRUE - Motor data read without errors, so it's possible to calculate torqe and current values in metric units
	bWarning						: BOOL;								// rCurrentF > rWarningCurrent, be aware to be over permitted range
	rWarningCurrent					: REAL; 							// Continuous Stall Current - motor parameter: 16#6075 (Ch A)/ 16#6875 (Ch B); scalled: [A]
	rTorquePerc						: REAL;								// [%]
	rTorquePercMax					: REAL;								// Max [%]
	rTorque							: REAL; 							// [Nm]
	rTorqueF						: REAL;								// Filtered [Nm]
	rTorqueMax						: REAL;								// Max [Nm]
	rCurrent						: REAL; 							// [A]
	rCurrentF						: REAL;								// Filtered [A]
	rCurrentMax						: REAL;								// Max [A]
	rI2T							: REAL; 							// Thermal Motor Utilization: 16#32C1:02 (Ch A)/ 16#36C1:02 (Ch B); units: [%]
	rI2TMax							: REAL; 							// Max % Nominal
END_VAR
VAR_IN_OUT
	Axis							: AXIS_REF;							// Axis Ref struct
END_VAR
VAR
//======================= Internal var ===========================
	iStep							: INT;								// Case instruction
	bDriveRefOK						: BOOL;								// stDriveRef contains necessary data to read CoE
	bTorqueLimitOK					: BOOL;								// rTorqueLimit in permitted range rTorqueLimitLow..rTorqueLimitHigh
	uiBipolarTorqueLimitValue  		AT %Q*: UINT; 						// Raw data, linked to Bipolar torque limit value
	iTorque 						: INT; 								// -1000 .. 1000 - RAW values the same as process image
	rTorqueRAW						: REAL; 							// -1000 .. 1000 - RAW values the same as process image
	rSfTorque						: REAL; 							// RAW -1000..1000 --> Nm
	rSfCurrent						: REAL; 							// Nm --> A
	udiMotorStandstillCurrent		: UDINT;							// 16#6075 (Ch A)/ 16#6875 (Ch B); units: [mA]
	udiMotorStandstillTorque		: UDINT;							// 16#6076 (Ch A)/ 16#6876 (Ch B); units: [mNm]
	wInitErrorCount					: WORD;								// Initialization error counter, if bigger then 10 then error
//========================== FBs ================================
	rtReset							: R_TRIG;							// Reset trigger
	tonWait							: TON;								// Wait timer - used for I2T read interval and for repeat initialization
	fbFilterEx						: FB_FilterEx;						// Filter
	fbCoERead						: FB_CoERead_ByDriveRef;			// FB for read CoE parameters
//===============================================================
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[//============== Reset max values and FB ========================
rtReset(CLK:= bReset);
IF rtReset.Q THEN
	fbCoERead.bExecute					:= FALSE;
	rCurrentMax							:= 0;
	rTorqueMax 							:= 0;
	rI2TMax								:= 0;
	uiAdsErrId		 					:= 0;
	uiCANopenErrId	 					:= 0;
	iStep								:= 0;
	wInitErrorCount						:= 0;
END_IF
//=================== Call triggers and timers ==================
tonWait(IN:= NOT tonWait.Q, PT:= T#1S);
//======= Check for parameter error - each cycle ================
bDriveRefOK 							:= (stDriveRef.nSlaveAddr <> 0) AND (stDriveRef.sNetId <> '');
bTorqueLimitOK 							:= (rTorqueLimit > rTorqueLimitLow);
//============= Read params and calculations ====================
CASE iStep OF
	
	0: // Read: Motor standstill current, 16#6075 (Ch A)/ 16#6875 (Ch B)
		// Execute read only if DriveRef is OK
		IF bDriveRefOK THEN
			fbCoERead.nIndex			:= 16#6075 + 16#800 * stDriveRef.nDriveNo;
			fbCoERead.nSubIndex			:= 0;
			fbCoERead.pDstBuf			:= ADR(udiMotorStandstillCurrent);
			fbCoERead.cbBufLen			:= SIZEOF(udiMotorStandstillCurrent);
			fbCoERead.bExecute			:= TRUE;
			iStep 						:= iStep + 10; 
		END_IF
	
	10: // Wait till read finish
		IF NOT fbCoERead.bBusy THEN
			IF fbCoERead.bError THEN
				fbCoERead.bExecute		:= FALSE;
				wInitErrorCount 		:= wInitErrorCount + 1;
				// Count > 10 then go to error and wait for reset, if not wait in warning step
				IF wInitErrorCount > 10 THEN
					uiAdsErrId			:= fbCoERead.iAdsErrId;
					uiCANopenErrId		:= fbCoERead.iCANopenErrId;
					iStep				:= 1000;									// Error step
				ELSE
					iStep				:= 900;										// Warning step
				END_IF
			ELSE
				fbCoERead.bExecute		:= FALSE;
				iStep 					:= iStep + 10;
			END_IF
		END_IF
	
	20: // Read: Motor standstill torque 16#6076 (Ch A)/ 16#6876 (Ch B)
		// Execute read only if DriveRef is OK
		IF bDriveRefOK THEN
			fbCoERead.nIndex			:= 16#6076 + 16#800 * stDriveRef.nDriveNo;
			fbCoERead.nSubIndex			:= 0;
			fbCoERead.pDstBuf			:= ADR(udiMotorStandstillTorque);
			fbCoERead.cbBufLen			:= SIZEOF(udiMotorStandstillTorque);
			fbCoERead.bExecute			:= TRUE;
			iStep 						:= iStep + 10; 
		END_IF
	
	30:	// Wait till read finish
		IF NOT fbCoERead.bBusy THEN
			IF fbCoERead.bError THEN
				fbCoERead.bExecute		:= FALSE;
				wInitErrorCount 		:= wInitErrorCount + 1;
				// Count > 10 then go to error and wait for reset, if not wait in warning step
				IF wInitErrorCount > 10 THEN
					uiAdsErrId			:= fbCoERead.iAdsErrId;
					uiCANopenErrId		:= fbCoERead.iCANopenErrId;
					iStep				:= 1000;									// Error step
				ELSE
					iStep				:= 900;										// Warning step
				END_IF
			ELSE
				fbCoERead.bExecute		:= FALSE;
				iStep 					:= iStep + 10;
			END_IF
		END_IF
	
	40: // Calculate Sf
		rSfTorque						:= UDINT_TO_REAL(udiMotorStandstillTorque) / 1000000;
		rSfCurrent						:= UDINT_TO_REAL(udiMotorStandstillCurrent) / 1000000;
		rWarningCurrent					:= UDINT_TO_REAL(udiMotorStandstillCurrent) / 1000;
		iStep 							:= 100;
	
	100: // Read: Thermal Motor Utilization (I2T), 16#32C1:02 (Ch A)/ 16#36C1:02 (Ch B)
		fbCoERead.nIndex				:= 16#32C1 + (16#400 * stDriveRef.nDriveNo);
		fbCoERead.nSubIndex				:= 02;
		fbCoERead.pDstBuf				:= ADR(rI2T);
		fbCoERead.cbBufLen				:= SIZEOF(rI2T);
		fbCoERead.bExecute				:= bDriveRefOK AND tonWait.Q;				// Execute read only if DriveRef is OK
		IF fbCoERead.bBusy THEN
			iStep 						:= iStep + 10;
		END_IF
	
	110: // Wait till read finish
		IF NOT fbCoERead.bBusy THEN
			IF fbCoERead.bError OR NOT bTorqueLimitOK OR NOT bDriveRefOK THEN
				uiAdsErrId				:= fbCoERead.iAdsErrId;
				uiCANopenErrId			:= fbCoERead.iCANopenErrId;
				iStep					:= 1000;									// Error step
			ELSE
				iStep 					:= iStep - 10;				
			END_IF
		END_IF
	
	900: // Warning - wait and repeat read - problem during read motor data, i.e. EtherCAT doesn't work yet
		IF tonWait.Q THEN
			iStep 						:= 0;	// Repeat initialization phase 
		END_IF
			  
			  
	1000: // Error - wait for reset 
		;
END_CASE
//===============================================================
	 
bError			 						:= iStep = 1000;
bInitialized	 						:= iStep >= 100 AND NOT bError;
//====================== Call CoE read FB =======================
fbCoERead(stDriveRef:= stDriveRef);
//======================== Set outputs ==========================
rTorquePerc								:= LREAL_TO_REAL(Axis.NcToPlc.ActTorque); 		// [%]
rTorqueRAW 								:= rTorquePerc*10;								// -1000 .. 1000 - RAW values the same as process image
//===================== Filter current value ====================
fbFilterEx(rIn:= rTorqueRAW, tTimeConstant:= T#1S);

iTorque 								:= REAL_TO_INT(rTorqueRAW);
rTorque 								:= rTorqueRAW * rSfTorque;
rCurrent 								:= rTorqueRAW * rSfCurrent;
rTorqueF 								:= fbFilterEx.rOut * rSfTorque;
rCurrentF 								:= fbFilterEx.rOut * rSfCurrent;
//=============== Save torque and current max values ===============
IF ABS(rCurrentMax) < ABS(rCurrentF) THEN
	rTorquePercMax						:= rTorquePerc;
	rCurrentMax 						:= rCurrentF;
	rTorqueMax 							:= rTorqueF;
END_IF
//======================== Save I2T max value ======================
IF rI2TMax < rI2T THEN
	rI2TMax 							:= rI2T;
END_IF

//===================== Limit output torque =====================
IF rTorqueLimit < rTorqueLimitLow THEN
	uiBipolarTorqueLimitValue 			:= REAL_TO_UINT(rTorqueLimitHigh);			// Secure against 0 value - probably empty var connected to input
ELSE
	uiBipolarTorqueLimitValue 			:= REAL_TO_UINT(LIMIT(rTorqueLimitLow,rTorqueLimit,rTorqueLimitHigh))*10;
END_IF
//========================= Warning =============================
bWarning								:= rCurrentF > rWarningCurrent;]]></ST>
    </Implementation>
    <LineIds Name="FB_MotorMonitoringAX8000">
      <LineId Id="1046" Count="0" />
      <LineId Id="1059" Count="0" />
      <LineId Id="1047" Count="0" />
      <LineId Id="1135" Count="0" />
      <LineId Id="1048" Count="5" />
      <LineId Id="1056" Count="1" />
      <LineId Id="805" Count="0" />
      <LineId Id="807" Count="0" />
      <LineId Id="811" Count="2" />
      <LineId Id="1136" Count="0" />
      <LineId Id="818" Count="19" />
      <LineId Id="839" Count="29" />
      <LineId Id="870" Count="12" />
      <LineId Id="884" Count="17" />
      <LineId Id="903" Count="17" />
      <LineId Id="1133" Count="1" />
      <LineId Id="1132" Count="0" />
      <LineId Id="923" Count="1" />
      <LineId Id="928" Count="29" />
    </LineIds>
  </POU>
</TcPlcObject>